import{_ as s,c as a,o as n,a as o}from"./app.182ff1de.js";const A=JSON.parse('{"title":"Using asynchronously","description":"","frontmatter":{},"headers":[],"relativePath":"guide/async.md","lastUpdated":1667769675000}'),l={name:"guide/async.md"},p=o(`<h1 id="using-asynchronously" tabindex="-1">Using asynchronously <a class="header-anchor" href="#using-asynchronously" aria-hidden="true">#</a></h1><p>As an alternative to the <a href="/guide/quick-start.html">quick start demo</a>, CRLS can be used asynchronously.</p><p>Just supply a function that returns a promise of your data to receive an asynchronous closure:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> crls </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">crls</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BlogPost</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Context</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getPosts</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Some query logic here (e.g. access your database)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> withRLS </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">crls</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(getPosts</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> security: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">// =&gt; You now need to call withRLS using await</span></span>
<span class="line"><span style="color:#676E95;">// =&gt; getPosts() will be evaluated every time withRLS is called</span></span>
<span class="line"></span></code></pre></div>`,4),e=[p];function t(c,r,y,D,i,C){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{A as __pageData,u as default};
